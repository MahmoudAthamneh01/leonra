generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  password           String
  isVerified         Boolean             @default(false)
  role               Role
  products           Product[]
  orders             Order[]
  models             ModelProfile[]
  complaints         Complaint[]
  verificationTokens VerificationToken[]
}

enum Role {
  buyer
  tajira
  model
  admin
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  imageUrl    String?
  tajira      User        @relation(fields: [tajiraId], references: [id])
  tajiraId    Int
  orders      OrderItem[]
}

model Order {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime    @default(now())
  items     OrderItem[]
  total     Float
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
}

model Complaint {
  id        Int      @id @default(autoincrement())
  title     String
  detail    String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  status    String   @default("open")
  createdAt DateTime @default(now())
}

model ModelProfile {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  bio       String?
  avatarUrl String?
}

model VerificationToken {
  id      Int      @id @default(autoincrement())
  token   String   @unique
  user    User     @relation(fields: [userId], references: [id])
  userId  Int
  expires DateTime
}
